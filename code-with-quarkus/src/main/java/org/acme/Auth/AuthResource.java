package org.acme.Auth;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.auth.FirebaseToken;
import com.google.firebase.auth.UserRecord;

import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.HeaderParam;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

@Path("/auth")
public class AuthResource {

    @Inject
    FirebaseAuth firebaseAuth;

    /**
     * Test routes to verify firebaseAuth is working
     * 
     * @param idToken JWT token (should be generated by front end)
     * @return Response with user ID if token is valid
     */
    @GET
    @Path("/token/{idToken}")
    @Produces(MediaType.TEXT_PLAIN)
    public Response verifyToken(@PathParam("idToken") String idToken) {
        try {
            FirebaseToken userRecord = firebaseAuth.verifyIdToken(idToken);
            return Response.ok("User ID: " + userRecord.getUid()).build();
        } catch (FirebaseAuthException e) {
            return Response.status(Response.Status.UNAUTHORIZED).entity("Invalid ID token").build();
        }
    }

    /**
     * Get user information on Firebase by UID
     * 
     * @param uid User ID
     * @return Response with user email if user is found
     */
    @GET
    @Path("/user/{uid}")
    @Produces(MediaType.TEXT_PLAIN)
    public Response getUser(@PathParam("uid") String uid) {
        try {
            UserRecord userRecord = firebaseAuth.getUser(uid);
            return Response.ok("User: " + userRecord.getEmail()).build();
        } catch (FirebaseAuthException e) {
            return Response.status(Response.Status.NOT_FOUND).entity("User not found").build();
        }
    }

    /**
     * Check token in request header, authorize only if token is present and valid
     */
    @GET
    @Path("/authorize")
    @Produces(MediaType.TEXT_PLAIN)
    public Response authorize(@HeaderParam("Authorization") String authorizationHeader) {
        if (authorizationHeader == null) {
            return Response.status(Response.Status.UNAUTHORIZED).entity("No ID token provided").build();
        }
        else{
            authorizationHeader = authorizationHeader.replace("Bearer ", "");
            try {
                FirebaseToken userRecord = firebaseAuth.verifyIdToken(authorizationHeader);
                return Response.ok("User ID: " + userRecord.getUid()).build();
            } catch (FirebaseAuthException e) {
                return Response.status(Response.Status.UNAUTHORIZED).entity("Invalid ID token").build();
            }
        }
    }
}
